import { determineWinner, startRound } from './gameHelpers'

// Function to decide the winner
describe("Function to decide the winner", () => {
  it("should return the message 'humans wins, for now.' if player wins", () => {
    const result = determineWinner("ğŸŒ³", "ğŸ—¿")

    expect(result).toBe('humans wins, for now.')
  })
  it("should return the message 'skynet has risen' if computer wins", () => {
    const result = determineWinner("ğŸŒ³", "ğŸª“")

    expect(result).toBe('skynet has risen')
  })
  it("should return the message 'do androids dream of electric sheep?' if a draw", () => {
    const result = determineWinner("ğŸŒ³", "ğŸŒ³")
    expect(result).toBe('do androids dream of electric sheep?')
  })

})
// Function to let the computer choose

describe("Function to let the computer choose", () => {
  it("should return an object with {player:'ğŸ—¿' , computer:'ğŸŒ³'} if cheating active", () => {
    const result = startRound(true, "ğŸ—¿")

    expect(result.player).toBe("ğŸ—¿")
    expect(result.computer).toBe("ğŸŒ³")
  })
  it("should return an object with {player:'ğŸª“' , computer:'ğŸ—¿'} if cheating active", () => {
    const result = startRound(true, "ğŸª“")

    expect(result.player).toBe("ğŸª“")
    expect(result.computer).toBe("ğŸ—¿")
  })
  it("should return an object with {player:'ğŸŒ³' , computer:'ğŸª“'} if cheating active", () => {
    const result = startRound(true, "ğŸŒ³")

    expect(result.player).toBe("ğŸŒ³")
    expect(result.computer).toBe("ğŸª“")
  })
  it("should return an object with {player:'ğŸŒ³' , computer:'something'} if cheating inactive", () => {
    const result = startRound(false, "ğŸŒ³")

    expect(result.player).toBe("ğŸŒ³")

    const isIncluded = ["ğŸª“", "ğŸŒ³", "ğŸ—¿"].includes(result.computer)
    expect(isIncluded).toBeTruthy()
  })
})